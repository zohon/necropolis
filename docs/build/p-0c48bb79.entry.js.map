{"version":3,"names":["necroComponentCss","NecroComponentStyle0","NecroComponent","this","allAffixTypes","componentDidLoad","selectDatas","searchType","dataofType","datas","find","type","dataAffix","map","dataParent","data","Object","assign","tags","filter","tag","includes","console","log","getAllAffixType","isTierRemoved","totalTier","currentTier","rating","Math","ceil","getRating","globalRating","getScore","corpse","corpseList","simulate","allRating","buff","active","reduce","acc","value","calcWeigth","info","weigth","Number","removedTier","tiers","globalweigth","tier","ntiers","score","floor","manageWeight","renderTierAffix","totalWeight","weight","calcScore","percent","h","class","name","toggle","idAffix","displayTiers","id","getTotalWeight","typeSearch","index","sortedData","sort","a","b","renderAffix","_a","affix","infoWeight","length","tierInfo","onClick","listSelectedAffix","ev","stopPropagation","toggleSelectAffix","simulateAffix","corpses","allAffixSorted","affixSelect","dataFromType","position","findIndex","calcAllAffixOptimisation","allSelectedAffixTags","selectedAffix","newTag","idSelectedAffix","allAffixData","enemies","slice","enemiesTags","enemi","diffTagsDirect","enemiesTag","conflict","diffTagsWithoutInterferences","difTag","more","less","flat","getPowerTag","makeOptimisation","simulationAffix","infoPast","nbCorpse","resultOpti","newCorpse","addLessCorpse","affixToReduce","random","toString","addMoreCorpse","newCorpseList","simulationAffixPresent","infoPresent","item","tagArray","itemExist","number","push","renderCim","options","text","increment","onChange","selectedType","currentTarget","selectedTypeBuff","selectedTypeValue","optionBuff","createCorps","copyText","title","window","confirm","saveCorps","min","step","max","onInput","corpseType","option","removeCorpse","setCorpseValue","pasteHandler","event","preventDefault","paste","getData","loadCorps","infoCorpse","navigator","clipboard","writeText","JSON","stringify","alert","corpseString","parse","error","corpseId","target","renderSelectBase","list","render","Host","key"],"sources":["src/components/necro-component/necro-component.scss?tag=necro-component&encapsulation=shadow","src/components/necro-component/necro-component.tsx"],"sourcesContent":[":host {\r\n  display: block;\r\n  background-color: black;\r\n  color: white;\r\n  font-family: system-ui;\r\n\r\n\r\n  .header {\r\n    display: flex;\r\n    gap: 15px;\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .title {\r\n    font-size: 25px;\r\n    padding: 0 0 15px;\r\n    text-transform: capitalize;\r\n    display: flex;\r\n    gap: 15px;\r\n  }\r\n\r\n  .affix-type {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n\r\n    .all-affix {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: 5px;\r\n    }\r\n  }\r\n\r\n  .affixs {\r\n    display: flex;\r\n    gap: 15px;\r\n    justify-content: space-between;\r\n\r\n    .affix {\r\n      gap: 5px;\r\n      padding: 0 5px;\r\n      flex-direction: column;\r\n      border: 1px solid;\r\n      user-select: none;\r\n      cursor: pointer;\r\n\r\n      &:nth-child(even) {\r\n        background-color: #121212;\r\n      }\r\n\r\n      .main {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: space-between;\r\n        gap: 5px;\r\n        padding: 5px;\r\n\r\n        .info {\r\n          gap: 5px;\r\n          display: flex;\r\n          align-items: center;\r\n          margin-right: 25px;\r\n\r\n          .name {\r\n            display: flex;\r\n            gap: 5px;\r\n          }\r\n        }\r\n\r\n        .mini-info {\r\n          display: flex;\r\n          position: relative;\r\n          gap: 5px;\r\n\r\n          .fav {\r\n            all: unset;\r\n            border: 1px solid;\r\n            width: 18px;\r\n            margin-left: 10px;\r\n\r\n            &:hover {\r\n              background-color: grey;\r\n            }\r\n\r\n            &.active {\r\n              background-color: white;\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n      }\r\n\r\n      &:hover {\r\n        border-left: 4px solid white;\r\n        padding-left: 2px;\r\n\r\n        .more-info {\r\n          opacity: 1;\r\n        }\r\n      }\r\n\r\n      .more-info {\r\n        opacity: 0;\r\n      }\r\n\r\n      .modified {\r\n        display: flex;\r\n\r\n        &.less {\r\n          color: #970707;\r\n        }\r\n\r\n        &.more {\r\n          color: rgb(19, 92, 19);\r\n        }\r\n      }\r\n\r\n      .tags {\r\n        gap: 5px;\r\n        display: flex;\r\n\r\n\r\n        .tag {\r\n          border: 1px solid #ccc;\r\n          padding: 3px;\r\n          font-size: 10px;\r\n        }\r\n      }\r\n\r\n      .tiers {\r\n        display: none;\r\n\r\n        &.display {\r\n          display: flex;\r\n          gap: 5px;\r\n          padding-left: 15px;\r\n          flex-direction: column;\r\n          margin-bottom: 10px;\r\n        }\r\n\r\n        .tier {\r\n          display: flex;\r\n          align-items: center;\r\n          justify-content: space-between;\r\n          gap: 5px;\r\n          padding: 0 5px;\r\n\r\n          .infos {\r\n            display: flex;\r\n            gap: 5px;\r\n          }\r\n\r\n          &.removed {\r\n            text-decoration: line-through;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  .tag {\r\n    cursor: pointer;\r\n\r\n\r\n    &-Elemental {\r\n      background: linear-gradient(0.25turn, rgb(177, 12, 12), rgb(94, 4, 94));\r\n    }\r\n\r\n    &-Fire {\r\n      color: white;\r\n      background-color: rgb(122, 20, 20);\r\n    }\r\n\r\n    &-Cold {\r\n      color: white;\r\n\r\n      background-color: rgb(22, 22, 138);\r\n    }\r\n\r\n    &-Lightning {\r\n      color: yellow;\r\n    }\r\n\r\n    &-Attack {\r\n      color: rgba(255, 123, 0, 0.514);\r\n    }\r\n\r\n    &-Mana {\r\n      color: rgb(0, 255, 221);\r\n    }\r\n\r\n    &-Physical {\r\n      color: rgb(110, 110, 110);\r\n    }\r\n\r\n    &-Chaos {\r\n      color: rgb(161, 0, 148);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  .cim {\r\n    padding-bottom: 15px;\r\n    position: sticky;\r\n    margin-bottom: 15px;\r\n    top: 0;\r\n    background: black;\r\n    z-index: 1;\r\n\r\n    .allCorpse {\r\n      margin-top: 15px;\r\n      display: flex;\r\n      gap: 5px;\r\n      flex-direction: column;\r\n      flex-wrap: wrap;\r\n      max-height: 20vh;\r\n\r\n\r\n\r\n      .corpse {\r\n        display: flex;\r\n        gap: 15px;\r\n        align-items: center;\r\n\r\n        .actions {\r\n          display: flex;\r\n          gap: 5px;\r\n\r\n          .remove {\r\n            background-color: #970707;\r\n            padding: 0px 5px 1px;\r\n            border-radius: 3px;\r\n            cursor: pointer;\r\n          }\r\n\r\n          .display {\r\n            background-color: #4b4b4b;\r\n            padding: 0px 5px 1px;\r\n            border-radius: 3px;\r\n            cursor: pointer;\r\n          }\r\n\r\n        }\r\n\r\n        &.active .actions {\r\n          .display {\r\n            background-color: #1c4e08;\r\n          }\r\n        }\r\n\r\n        .content {\r\n          display: flex;\r\n          align-items: center;\r\n          gap: 15px;\r\n          opacity: 0.5;\r\n        }\r\n\r\n\r\n        &.active .content {\r\n          opacity: 1;\r\n        }\r\n\r\n        .tag {\r\n          border: 1px solid #ccc;\r\n          padding: 3px;\r\n          font-size: 12px;\r\n        }\r\n\r\n\r\n      }\r\n\r\n    }\r\n\r\n    .rating-management {\r\n      display: flex;\r\n      align-items: center;\r\n      height: 30px;\r\n      gap: 10px;\r\n    }\r\n\r\n    .selector {\r\n      display: flex;\r\n      justify-content: space-between;\r\n\r\n      .left {\r\n        display: flex;\r\n        gap: 5px;\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n}","import { Component, Host, Listen, State, h } from '@stencil/core';\r\nimport datas from './data/allInfos.json';\r\n\r\n\r\ninterface Corpse {\r\n  id: string;\r\n  type: string;\r\n  buff: 'more' | 'less' | 'rating';\r\n  value: number;\r\n  active: boolean;\r\n}\r\n\r\ninterface AffixTier {\r\n  parentId: string;\r\n  type: string;\r\n  name: string;\r\n  tier: string;\r\n  weigth: string;\r\n  ilvl: string;\r\n}\r\n\r\ninterface Affix {\r\n  id: string;\r\n  type: string;\r\n  name: string;\r\n  ntiers: string;\r\n  weigth: string | number;\r\n  ilvl: string;\r\n  tags: string[];\r\n  tiers?: AffixTier[];\r\n  score?: number;\r\n  removedTier?: number;\r\n}\r\n\r\n\r\n@Component({\r\n  tag: 'necro-component',\r\n  styleUrl: 'necro-component.scss',\r\n  shadow: true,\r\n})\r\nexport class NecroComponent {\r\n\r\n  allAffixTypes: string[] = [\r\n    \"Physical\",\r\n    \"Fire\",\r\n    \"Cold\",\r\n    \"Lightning\",\r\n    \"Chaos\",\r\n    \"Life\",\r\n    \"Mana\",\r\n    \"Attack\",\r\n    \"Caster\",\r\n    \"Elemental\",\r\n    \"Defences\",\r\n    \"Critical\",\r\n    \"Speed\",\r\n    \"Attribute\",\r\n    \"Resistance\",\r\n    \"Gem\",\r\n    \"Minion\"\r\n  ];\r\n\r\n  @State() selectedTypeBuff: 'more' | 'less' | 'rating';\r\n  selectedType: string;\r\n  selectedTypeValue: number;\r\n\r\n  @State() corpseList: Corpse[] = [];\r\n  @State() displayTiers: string[] = [];\r\n  @State() listSelectedAffix: Affix[] = [];\r\n\r\n  @State() dataAffix: Affix[][];\r\n  @State() globalRating: number;\r\n\r\n  componentDidLoad() {\r\n    // this.getAllAffixType();\r\n  }\r\n\r\n  selectDatas(searchType: string) {\r\n\r\n    const dataofType = datas.find(({ type }) => type === searchType).datas;\r\n\r\n    this.dataAffix =\r\n      dataofType.map((dataParent) => {\r\n        return dataParent.map((data) => {\r\n          return {\r\n            ...data,\r\n            tags: data.tags.filter(tag => this.allAffixTypes.includes(tag))\r\n          }\r\n        })\r\n      });\r\n    console.log('selectDatas', datas, searchType, this.dataAffix);\r\n    // this.getAllAffixType();\r\n  }\r\n\r\n  getAllAffixType() {\r\n    // this.allAffixTypes = [...new Set(this.dataAffix?.flat().map(({ tags }) => tags).flat())];\r\n  }\r\n\r\n  isTierRemoved(totalTier: number, currentTier: number, rating: number): boolean {\r\n    if (!rating) {\r\n      return false;\r\n    }\r\n    return Math.ceil(totalTier / (1 + (rating / 100))) < currentTier;\r\n  }\r\n\r\n  getRating(): number {\r\n    return this.globalRating;\r\n    // const allRating = this.corpseList.filter(({ type, buff }) => buff === 'rating' && tags.includes(type));\r\n\r\n    // return allRating.reduce((acc, { value }) => {\r\n    //   return acc + value;\r\n    // }, 0)\r\n  }\r\n\r\n  getScore(tags: string[], corpse = this.corpseList, simulate = false) {\r\n    const allRating = corpse.filter(({ type, buff, active }) => (simulate ? true : active) && buff !== 'rating' && tags.includes(type));\r\n    return allRating.reduce((acc, { value, buff }) => {\r\n      switch (buff) {\r\n        case 'more':\r\n          return acc + value;\r\n        case 'less':\r\n          return acc - value;\r\n      }\r\n    }, 0)\r\n  }\r\n\r\n  calcWeigth(data: Affix[], corpse = this.corpseList, simulate = false): Affix[] {\r\n    return data.map(info => {\r\n\r\n      let weigth = Number(info.weigth);\r\n\r\n      let removedTier = 0;\r\n\r\n      if (info.tiers) {\r\n        let rating = this.getRating();\r\n        const globalweigth = info.tiers.reduce((acc, { weigth, tier }) => {\r\n          if (this.isTierRemoved(Number(info.ntiers), Number(tier), rating)) {\r\n            removedTier++;\r\n            return acc;\r\n          }\r\n          return acc + Number(weigth)\r\n        }, 0)\r\n\r\n        weigth = globalweigth;\r\n      }\r\n\r\n      return {\r\n        ...info,\r\n        score: this.getScore(info.tags, corpse, simulate),\r\n        removedTier,\r\n        weigth: Math.floor(weigth)\r\n      };\r\n    })\r\n  }\r\n\r\n  manageWeight() {\r\n    return 10\r\n  }\r\n\r\n\r\n  renderTierAffix(tiers: AffixTier[], ntiers: number, score: number, totalWeight: number) {\r\n    return tiers.map((tier) => {\r\n      const weight = this.calcScore(score, Number(tier.weigth));\r\n      const percent = Math.floor((weight / totalWeight) * 1000) / 10;\r\n      return (\r\n        <div class={`tier ${this.isTierRemoved(ntiers, Number(tier.tier), this.getRating()) ? 'removed' : ''}`}>\r\n          <div>{tier.name}</div>\r\n          <div class=\"infos\">\r\n            <div class=\"affix-tier\">({tier.tier})</div>\r\n            <div>{weight}  {percent}%</div>\r\n          </div>\r\n        </div>)\r\n    })\r\n  }\r\n\r\n  calcScore(score: number, weight: number): number {\r\n    if (!score) {\r\n      return weight;\r\n    }\r\n\r\n    if (score > 0) {\r\n      return Math.floor(weight + (weight * (score / 100)));\r\n    } else if (score < 0) {\r\n      return Math.floor(weight / (1 + (-score / 100)));\r\n    }\r\n    return weight;\r\n  }\r\n\r\n  toggle(idAffix: string) {\r\n    if (this.displayTiers.includes(idAffix)) {\r\n      this.displayTiers = this.displayTiers.filter(id => id !== idAffix);\r\n      return;\r\n    }\r\n    this.displayTiers = [...this.displayTiers, idAffix];\r\n  }\r\n\r\n\r\n  getTotalWeight(typeSearch: string, corpse = this.corpseList, simulate = false) {\r\n\r\n    let index = 0;\r\n    while (this.dataAffix[index][0].type !== typeSearch) {\r\n      index++;\r\n    }\r\n\r\n    const datas = this.dataAffix[index];\r\n\r\n    const sortedData = this.calcWeigth(datas, corpse, simulate).sort((a, b) => {\r\n      return this.calcScore(b.score, Number(b.weigth)) - this.calcScore(a.score, Number(a.weigth));\r\n    });\r\n\r\n    return sortedData.reduce((acc, info) => {\r\n      return acc + this.calcScore(info.score, Number(info.weigth));\r\n    }, 0)\r\n  }\r\n\r\n  renderAffix() {\r\n\r\n    if (!this.dataAffix) {\r\n      return;\r\n    }\r\n\r\n    return this.dataAffix.map((data) => {\r\n\r\n      const sortedData = this.calcWeigth(data).sort((a, b) => {\r\n        return this.calcScore(b.score, Number(b.weigth)) - this.calcScore(a.score, Number(a.weigth));\r\n      });\r\n\r\n      const totalWeight = sortedData.reduce((acc, info) => {\r\n        return acc + this.calcScore(info.score, Number(info.weigth));\r\n      }, 0)\r\n\r\n      return <div class=\"affix-type\">\r\n        <div class=\"title\">{data[0]?.type} - {totalWeight}</div>\r\n        <div class=\"all-affix\">\r\n          {sortedData.map((affix) => {\r\n            let { id, name, tags, weigth, tiers, ntiers, score, removedTier } = affix;\r\n\r\n            let infoWeight = this.calcScore(score, Number(weigth));\r\n\r\n            const percent = Math.floor((infoWeight / totalWeight) * 1000) / 10;\r\n\r\n            if (score) {\r\n              infoWeight = <div class={`modified ${infoWeight < Number(weigth) ? 'less' : 'more'}`} ><div class=\"more-info\">({score},{weigth})</div> {infoWeight} {percent}%</div>\r\n            } else {\r\n              infoWeight = <div>{infoWeight} {percent}%</div>\r\n            }\r\n\r\n            if (tiers.length) {\r\n              name = tiers[0].name;\r\n            }\r\n\r\n            let tierInfo;\r\n            if (removedTier > 0 && tiers[removedTier]) {\r\n              tierInfo = <div class=\"removed-tier\" >(T{Number(ntiers) - removedTier})</div>\r\n              name = tiers[removedTier].name;\r\n            }\r\n\r\n            return (<div class=\"affix\" onClick={() => this.toggle(id)}>\r\n              <div class=\"main\">\r\n                <div class=\"info\">\r\n                  <div class=\"name\"><div>{tierInfo}</div>{name}</div>\r\n                  <div class=\"tags\">\r\n                    {tags?.map(tag => {\r\n                      return <div class={`tag tag-${tag}`}>{tag}</div>\r\n                    })}\r\n                  </div>\r\n                </div>\r\n                <div class=\"mini-info\">\r\n                  <div>{infoWeight}</div>\r\n                  <button class={`fav ${this.listSelectedAffix.find(({ id }) => id === affix.id) ? 'active' : ''}`} onClick={(ev) => {\r\n                    ev.stopPropagation();\r\n                    this.toggleSelectAffix(affix)\r\n                  }}></button>\r\n                </div>\r\n\r\n              </div>\r\n              <div class={`tiers ${this.displayTiers.includes(id) ? 'display' : ''}`} >{this.renderTierAffix(tiers, Number(ntiers), score, totalWeight)}</div>\r\n            </div>)\r\n          })\r\n          }\r\n        </div>\r\n      </div >\r\n    })\r\n  }\r\n\r\n\r\n  toggleSelectAffix(affix: Affix) {\r\n    if (this.listSelectedAffix.find(({ id }) => id === affix.id)) {\r\n      this.listSelectedAffix = this.listSelectedAffix.filter(({ id }) => id !== affix.id);\r\n    } else {\r\n      this.listSelectedAffix = [...this.listSelectedAffix, affix];\r\n    }\r\n  }\r\n\r\n\r\n  simulateAffix(corpses = this.corpseList) {\r\n    const allAffixSorted = this.dataAffix.map((data) => {\r\n      const sortedData = this.calcWeigth(data, corpses, true).sort((a, b) => {\r\n        return this.calcScore(b.score, Number(b.weigth)) - this.calcScore(a.score, Number(a.weigth));\r\n      });\r\n      return {\r\n        type: data[0].type,\r\n        data: sortedData\r\n      };\r\n    });\r\n\r\n    return this.listSelectedAffix.map(affixSelect => {\r\n      const dataFromType = allAffixSorted.find(({ type }) => type === affixSelect.type).data;\r\n\r\n      // we get position of target\r\n      const position = dataFromType.findIndex((({ id }) => id === affixSelect.id));\r\n\r\n      let infoWeight = this.calcScore(affixSelect.score, Number(affixSelect.weigth));\r\n\r\n      const totalWeight = this.getTotalWeight(affixSelect.type, corpses, true);\r\n\r\n      console.log('totalWeight', totalWeight, '/', infoWeight, affixSelect.name);\r\n\r\n      const percent = Math.floor((infoWeight / totalWeight) * 1000) / 10;\r\n\r\n      return {\r\n        affix: affixSelect,\r\n        position,\r\n        percent\r\n      }\r\n    });\r\n  }\r\n\r\n  calcAllAffixOptimisation(corpse = this.corpseList) {\r\n    const allAffixSorted = this.dataAffix.map((data) => {\r\n      const sortedData = this.calcWeigth(data, corpse).sort((a, b) => {\r\n        return this.calcScore(b.score, Number(b.weigth)) - this.calcScore(a.score, Number(a.weigth));\r\n      });\r\n      return {\r\n        type: data[0].type,\r\n        data: sortedData\r\n      };\r\n    });\r\n\r\n    const allSelectedAffixTags = this.listSelectedAffix.reduce((acc, selectedAffix) => {\r\n      const newTag = selectedAffix.tags.filter(tag => !acc.includes(tag));\r\n      return [...acc,\r\n      ...newTag]\r\n    }, [])\r\n\r\n    const idSelectedAffix = this.listSelectedAffix.map(({ id }) => id);\r\n\r\n    const allAffixData = this.listSelectedAffix.map(affixSelect => {\r\n\r\n      const dataFromType = allAffixSorted.find(({ type }) => type === affixSelect.type).data;\r\n\r\n      // we get position of target\r\n      const position = dataFromType.findIndex((({ id }) => id === affixSelect.id));\r\n\r\n      //we get all better target\r\n      let enemies = dataFromType.slice(0, position);\r\n\r\n      // we remove our selected from enemi\r\n      enemies = enemies.filter(({ id }) => !idSelectedAffix.includes(id));\r\n\r\n      //we get all tags from enemies\r\n      const enemiesTags = enemies.reduce((acc, enemi) => {\r\n        const newTag = enemi.tags.filter(tag => !acc.includes(tag));\r\n        return [...acc,\r\n        ...newTag]\r\n      }, [])\r\n\r\n      const diffTagsDirect = enemiesTags.filter(enemiesTag => !affixSelect.tags.includes(enemiesTag) && this.allAffixTypes.includes(enemiesTag));\r\n      const conflict = enemiesTags.filter(enemiesTag => affixSelect.tags.includes(enemiesTag) && this.allAffixTypes.includes(enemiesTag));\r\n      const diffTagsWithoutInterferences = diffTagsDirect.filter(difTag => !allSelectedAffixTags.includes(difTag) && this.allAffixTypes.includes(difTag));\r\n\r\n      return {\r\n        more: affixSelect.tags.filter(enemiesTag => !conflict.includes(enemiesTag)),\r\n        conflict: conflict,\r\n        less: diffTagsWithoutInterferences\r\n      }\r\n    });\r\n\r\n    // console.log('MORE', this.getPowerTag(allAffixData.map(({ more }) => more).flat()).map(({ name, number }) => `${name}(${number})`));\r\n    // console.log('conflict', this.getPowerTag(allAffixData.map(({ conflict }) => conflict).flat()).map(({ name, number }) => `${name}(${number})`));\r\n    // console.log('LESS', this.getPowerTag(allAffixData.map(({ less }) => less).flat()).map(({ name, number }) => `${name}(${number})`));\r\n\r\n    const conflict = allAffixData.map(({ conflict }) => conflict).flat();\r\n    const more = allAffixData.map(({ more }) => more).flat();\r\n\r\n    return {\r\n      more: this.getPowerTag(more),\r\n      conflict: this.getPowerTag(conflict),\r\n      less: this.getPowerTag(allAffixData.map(({ less }) => less).flat()),\r\n    }\r\n  }\r\n\r\n\r\n  makeOptimisation() {\r\n\r\n    const simulationAffix = this.simulateAffix();\r\n\r\n    const infoPast = {\r\n      nbCorpse: this.corpseList.length,\r\n      score: simulationAffix.reduce((acc, { position }) => acc + position, 0),\r\n      percent: simulationAffix.reduce((acc, { percent }) => acc + percent, 0)\r\n    };\r\n\r\n    const resultOpti = this.calcAllAffixOptimisation();\r\n\r\n    let newCorpse = [];\r\n    if (resultOpti.less.length) {\r\n      const addLessCorpse = resultOpti.less.filter(({ name }) => {\r\n        return !this.corpseList.find(({ type, buff }) => buff === 'less' && type === name)\r\n      }).map(affixToReduce => {\r\n        return {\r\n          id: \"id\" + Math.random().toString(16).slice(2),\r\n          type: affixToReduce.name,\r\n          buff: 'less',\r\n          value: 300,\r\n          active: true\r\n        }\r\n      })\r\n\r\n      // this.corpseList.filter(({ type, buff }) => buff === 'less' && resultOpti.less.map(({ name }) => name).includes(type)).map(corpse => {\r\n      //   this.setCorpseValue(corpse.id, 'value', corpse.value + 300);\r\n      // })\r\n\r\n      newCorpse = [\r\n        ...newCorpse,\r\n        ...addLessCorpse\r\n      ]\r\n    }\r\n\r\n    if (resultOpti.more.length) {\r\n      const addMoreCorpse = resultOpti.more.filter(({ name }) => {\r\n        return !this.corpseList.find(({ type, buff }) => buff === 'more' && type === name)\r\n      }).map(affixToReduce => {\r\n        return {\r\n          id: \"id\" + Math.random().toString(16).slice(2),\r\n          type: affixToReduce.name,\r\n          buff: 'more',\r\n          value: 500,\r\n          active: true\r\n        }\r\n      });\r\n\r\n      // this.corpseList.filter(({ type, buff }) => buff === 'less' && resultOpti.less.map(({ name }) => name).includes(type)).map(corpse => {\r\n      //   this.setCorpseValue(corpse.id, 'value', corpse.value + 500);\r\n      // })\r\n\r\n      newCorpse = [\r\n        ...newCorpse,\r\n        ...addMoreCorpse\r\n      ];\r\n    }\r\n\r\n    const newCorpseList = [\r\n      ...this.corpseList,\r\n      ...newCorpse.flat()\r\n    ];\r\n\r\n    console.log('newCorpseList', resultOpti, newCorpseList);\r\n    const simulationAffixPresent = this.simulateAffix(newCorpseList);\r\n\r\n    console.log(simulationAffixPresent);\r\n    const infoPresent = {\r\n      nbCorpse: newCorpseList.length,\r\n      score: simulationAffixPresent.reduce((acc, { position }) => acc + position, 0),\r\n      percent: simulationAffixPresent.reduce((acc, { percent }) => acc + percent, 0)\r\n    };\r\n\r\n\r\n    if (infoPresent.percent > infoPast.percent) {\r\n      console.log('improvement', infoPresent);\r\n      this.corpseList = newCorpseList;\r\n    } else {\r\n      console.log('rollback', infoPresent, infoPast);\r\n\r\n      this.corpseList = [\r\n        ...this.corpseList,\r\n        ...newCorpse.flat().map((item) => ({ ...item, active: false }))\r\n      ];\r\n      // this.corpseList.splice(infoPast.nbCorpse, this.corpseList.length - infoPast.nbCorpse);\r\n    }\r\n  }\r\n\r\n\r\n  getPowerTag(tagArray) {\r\n    return tagArray.reduce((acc, item) => {\r\n      const itemExist = acc.find(({ name }) => name === item);\r\n      if (itemExist) {\r\n        itemExist.number += 1;\r\n      } else {\r\n        acc.push({\r\n          name: item,\r\n          number: 1\r\n        });\r\n      }\r\n      return acc;\r\n    }, []).sort((a, b) => b.number - a.number)\r\n  }\r\n\r\n\r\n  renderCim() {\r\n\r\n    const options = [\r\n      {\r\n        buff: \"more\",\r\n        text: \"Increased chance\",\r\n        increment: 500\r\n      },\r\n      {\r\n        buff: \"less\",\r\n        text: \"Scarcer\",\r\n        increment: 300\r\n      }\r\n      // {\r\n      //   buff: \"rating\",\r\n      //   text: \"Tier Rating\",\r\n      //   increment: 50\r\n      // }\r\n    ]\r\n\r\n\r\n\r\n    return <div class=\"cim\">\r\n      <div class=\"selector\">\r\n        <div class=\"left\">\r\n          <div>Add Corpse</div>\r\n          <select onChange={(ev) => this.selectedType = (ev.currentTarget as HTMLSelectElement).value}>\r\n            <option></option>\r\n            {this.allAffixTypes.sort().map(type => {\r\n              return <option value={type}>{type}</option>\r\n            })}\r\n          </select>\r\n\r\n          <select onChange={(ev) => {\r\n            this.selectedTypeBuff = (ev.currentTarget as HTMLSelectElement).value as 'more' | 'less' | 'rating';\r\n          }}>\r\n            <option></option>\r\n            {\r\n              options.map(({ buff, text }) => <option value={buff}>{text}</option>)\r\n            }\r\n          </select>\r\n\r\n          <button onClick={(() => {\r\n            this.selectedTypeValue = options.find(({ buff: optionBuff }) => optionBuff === this.selectedTypeBuff).increment;\r\n            this.createCorps()\r\n          })}>Validate</button>\r\n\r\n        </div>\r\n        <div>\r\n          <button onClick={() => this.copyText()} title=\"select affix (right box on affix line) to generate affix to remove\">COPY</button>\r\n          <button onClick={() => this.makeOptimisation()} title=\"select affix (right box on affix line) to generate affix to remove\">OPTIMISE</button>\r\n\r\n          <button onClick={() => {\r\n            if (window.confirm(\"Do you really want to remove all corpse ?\")) {\r\n              this.corpseList = []\r\n            }\r\n          }} title=\"Clean all corpse\">Clean</button>\r\n\r\n          <button onClick={() => this.saveCorps()} title=\"Copy all corpse\">Copy corpse</button>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"rating-management\">\r\n        <div>Global rating</div>\r\n        <input type=\"range\" min=\"0\" step=\"50\" max={50 * 30}\r\n          value={this.globalRating}\r\n          onInput={(ev) => this.globalRating = Number((ev.currentTarget as HTMLInputElement).value)}></input>\r\n        {this.globalRating}\r\n      </div>\r\n\r\n      <div class=\"display\">\r\n        <div class=\"allCorpse\">\r\n          {this.corpseList.map(({ id, type, buff, value, active }) => {\r\n\r\n            const corpseType = options.find((option) => option.buff === buff);\r\n\r\n            return <div class={`corpse ${active ? 'active' : ''}`}>\r\n              <div class=\"actions\">\r\n                <div class=\"remove\" title=\"remove corpse\" onClick={() => {\r\n                  if (window.confirm(\"Do you really want to delete this corpse ?\")) {\r\n                    this.removeCorpse(id)\r\n                  }\r\n                }}>X</div>\r\n                <div class=\"display\" title=\"active or deactive corpse\" onClick={() => this.setCorpseValue(id, 'active', !active)}>O</div>\r\n              </div>\r\n              <div class=\"content\">\r\n                <div>{options.find(({ buff: optionBuff }) => optionBuff === buff).text}</div>\r\n                <div class={`tag tag-${type}`}>{type}</div>\r\n                <div>\r\n                  <input type=\"range\" min=\"0\" step={corpseType.increment} max={corpseType.increment * 10}\r\n                    value={value}\r\n                    onInput={(ev) => this.setCorpseValue(id, 'value', Number((ev.currentTarget as HTMLInputElement).value))}></input>\r\n                  <input value={value} onInput={(ev) => this.setCorpseValue(id, 'value', Number((ev.currentTarget as HTMLInputElement).value))}></input>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          })}\r\n        </div>\r\n        <div class=\"allCorpseRecap\">\r\n        </div>\r\n      </div>\r\n    </div >\r\n  }\r\n\r\n  @Listen('paste')\r\n  pasteHandler(event: any) {\r\n    event.preventDefault();\r\n    let paste = (event.clipboardData).getData(\"text\")\r\n    this.loadCorps(paste);\r\n  }\r\n\r\n  saveCorps() {\r\n\r\n    const infoCorpse = {\r\n      globalRating: this.globalRating,\r\n      corpseList: this.corpseList\r\n    }\r\n\r\n    navigator.clipboard.writeText(JSON.stringify(infoCorpse));\r\n    alert('corpse saved to clipboard (paste them on the application direclty)')\r\n  }\r\n\r\n\r\n  copyText() {\r\n    console.log(this.corpseList.sort(((a, b) => b.value - a.value)).map(({ buff, type, value }) => `${type} MODIFIER ARE ${value}% ${buff}`))\r\n  }\r\n\r\n  loadCorps(corpseString: string) {\r\n    if (corpseString) {\r\n      try {\r\n        const datas = JSON.parse(corpseString);\r\n        this.globalRating = datas.globalRating;\r\n        this.corpseList = datas.corpseList;\r\n      } catch (error) {\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  removeCorpse(corpseId: string) {\r\n    this.corpseList = this.corpseList.filter(({ id }) => id !== corpseId);\r\n  }\r\n\r\n  setCorpseValue(corpseId: string, target: string, value: any) {\r\n    this.corpseList = this.corpseList.map((corpse) => {\r\n      if (corpse.id === corpseId) {\r\n        corpse[target] = value;\r\n      }\r\n      return corpse;\r\n    });\r\n  }\r\n\r\n  createCorps() {\r\n    this.corpseList = [...this.corpseList,\r\n    {\r\n      id: \"id\" + Math.random().toString(16).slice(2),\r\n      type: this.selectedType,\r\n      buff: this.selectedTypeBuff,\r\n      value: this.selectedTypeValue,\r\n      active: true\r\n    }\r\n    ];\r\n  }\r\n\r\n  renderSelectBase() {\r\n    return <div class=\"header\">\r\n      <div>Select Base type :</div>\r\n      <input list=\"itemBase\" onInput={(ev) => this.selectDatas(((ev.currentTarget as HTMLInputElement).value))}></input>\r\n      <datalist id=\"itemBase\">\r\n        {datas.map(({ type }) => <option value={type}></option>)}\r\n      </datalist>\r\n      {/* \r\n      {datas.map(({ type }) => <button onClick={() => this.selectDatas((type))}>{type.replace('data-', '').replace('.json', '').replace('-', ' ')}</button>)} */}\r\n    </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n        {this.renderSelectBase()}\r\n        {this.renderCim()}\r\n        <div class=\"affixs\">\r\n          {this.renderAffix()}\r\n        </div>\r\n      </Host>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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"}